<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>React</title>
		<description>A JavaScript library for building user interfaces</description>
		<link>http://facebook.github.io/react</link>
		<atom:link href="http://facebook.github.io/react/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Use React and JSX in Python Applications</title>
				<description>&lt;p&gt;Today we&amp;#39;re happy to announce the initial release of &lt;a href=&quot;https://github.com/facebook/react-python&quot;&gt;PyReact&lt;/a&gt;, which makes it easier to use React and JSX in your Python applications. It&amp;#39;s designed to provide an API to transform your JSX files into JavaScript, as well as provide access to the latest React source files.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;Transform your JSX files via the provided &lt;code&gt;jsx&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;react&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsx&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# For multiple paths, use the JSXTransformer class.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSXTransformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsx_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsx_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# For a single file, you can use a shortcut method.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jsx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;path/to/input/file.jsx&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;path/to/output/file.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For full paths to React files, use the &lt;code&gt;source&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;react&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# path_for raises IOError if the file doesn&amp;#39;t exist.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;react_js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;react.min.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Django&lt;/h2&gt;

&lt;p&gt;PyReact includes a JSX compiler for &lt;a href=&quot;https://github.com/cyberdelia/django-pipeline&quot;&gt;django-pipeline&lt;/a&gt;. Add it to your project&amp;#39;s pipeline settings like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;PIPELINE_COMPILERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;#39;react.utils.pipeline.JSXCompiler&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;PyReact is hosted on PyPI, and can be installed with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;$ pip install PyReact
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, add it into your &lt;code&gt;requirements&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;PyReact==0.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;: PyReact uses &lt;a href=&quot;https://github.com/doloopwhile/PyExecJS&quot;&gt;PyExecJS&lt;/a&gt; to execute the bundled React code, which requires that a JS runtime environment is installed on your machine. We don&amp;#39;t explicitly set a dependency on a runtime environment; Mac OS X comes bundled with one. If you&amp;#39;re on a different platform, we recommend &lt;a href=&quot;https://code.google.com/p/pyv8/&quot;&gt;PyV8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the initial release, we&amp;#39;ve only tested on Python 2.7. Look out for support for Python 3 in the future, and if you see anything that can be improved, we welcome your &lt;a href=&quot;https://github.com/facebook/react-python/blob/master/CONTRIBUTING.md&quot;&gt;contributions&lt;/a&gt;!&lt;/p&gt;
</description>
				<pubDate>2013-08-19T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/08/19/use-react-and-jsx-in-python-applications.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/08/19/use-react-and-jsx-in-python-applications.html</guid>
			</item>
		
			<item>
				<title>Community Round-up #6</title>
				<description>&lt;p&gt;This is the first Community Round-up where none of the items are from Facebook/Instagram employees. It&amp;#39;s great to see the adoption of React growing.&lt;/p&gt;

&lt;h2&gt;React Game Tutorial&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/CalebCassel&quot;&gt;Caleb Cassel&lt;/a&gt; wrote a &lt;a href=&quot;https://rawgithub.com/calebcassel/react-demo/master/part1.html&quot;&gt;step-by-step tutorial&lt;/a&gt; about making a small game. It covers JSX, State and Events, Embedded Components and Integration with Backbone.
&lt;figure&gt;&lt;a href=&quot;https://rawgithub.com/calebcassel/react-demo/master/part1.html&quot;&gt;&lt;img src=&quot;/react/img/blog/dog-tutorial.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2&gt;Reactify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://andreypopp.com/&quot;&gt;Andrey Popp&lt;/a&gt; created a &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; helper to compile JSX files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Browserify v2 transform for &lt;code&gt;text/jsx&lt;/code&gt;. Basic usage is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;% browserify -t reactify main.jsx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;reactify&lt;/code&gt; transform activates for files with either &lt;code&gt;.jsx&lt;/code&gt; extension or &lt;code&gt;/** @jsx React.DOM */&lt;/code&gt; pragma as a first line for any &lt;code&gt;.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andreypopp/reactify&quot;&gt;Check it out on Github...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React Integration with Este&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://daniel.steigerwald.cz/&quot;&gt;Daniel Steigerwald&lt;/a&gt; is now using React within &lt;a href=&quot;https://github.com/steida/este&quot;&gt;Este&lt;/a&gt;, which is a development stack for web apps in CoffeeScript that are statically typed using the Closure Library.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;nv&quot;&gt;este.demos.react.todoApp = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;este&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/** @lends {React.ReactComponent.prototype} */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;render: &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;@div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;este&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;demos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;@p&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; items.&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;@form&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;onSubmit&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;@onFormSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;@input&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;onChange&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;@onChange&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;autoFocus&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;textInput&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;@button&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Add &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;@state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steida/este-library/blob/master/este/demos/thirdparty/react/start.coffee&quot;&gt;Check it out on Github...&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;React Stylus Boilerplate&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://zaim.github.io/&quot;&gt;Zaim Bakar&lt;/a&gt; shared his boilerplate to get started with Stylus CSS processor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is my boilerplate React project using Grunt as the build tool, and Stylus as my CSS preprocessor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very minimal HTML boilerplate&lt;/li&gt;
&lt;li&gt;Uses Stylus, with nib included&lt;/li&gt;
&lt;li&gt;Uses two build targets:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grunt build&lt;/code&gt; to compile JSX and Stylus into a development build&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grunt dist&lt;/code&gt; to minify and optimize the development build for production&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zaim/react-stylus-boilerplate&quot;&gt;Check it out on Github...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;WebFUI&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://lisperati.com/&quot;&gt;Conrad Barski&lt;/a&gt;, author of the popular book &lt;a href=&quot;http://landoflisp.com/&quot;&gt;Land of Lisp&lt;/a&gt;, wants to use React for his ClojureScript library called &lt;a href=&quot;https://github.com/drcode/webfui&quot;&gt;WebFUI&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#39;m the author of &amp;quot;&lt;a href=&quot;http://landoflisp.com/&quot;&gt;Land of Lisp&lt;/a&gt;&amp;quot; and I love your framework. I built a somewhat similar framework a year ago &lt;a href=&quot;https://github.com/drcode/webfui&quot;&gt;WebFUI&lt;/a&gt; aimed at ClojureScript. My framework also uses global event delegates, a global &amp;quot;render&amp;quot; function, DOM reconciliation, etc just like react.js. (Of course these ideas all have been floating around the ether for ages, always great to see more people building on them.)&lt;/p&gt;

&lt;p&gt;Your implementation is more robust, and so I think the next point release of webfui will simply delegate all the &amp;quot;hard work&amp;quot; to react.js and will only focus on the areas where it adds value (enabling purely functional UI programming in clojurescript, and some other stuff related to streamlining event handling)
&lt;figure&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/reactjs/e3bYersyd64/qODfcuBR9LwJ&quot;&gt;&lt;img src=&quot;/react/img/blog/landoflisp.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!msg/reactjs/e3bYersyd64/qODfcuBR9LwJ&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2013-08-05T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/08/05/community-roundup-6.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/08/05/community-roundup-6.html</guid>
			</item>
		
			<item>
				<title>Use React and JSX in Ruby on Rails</title>
				<description>&lt;p&gt;Today we&amp;#39;re releasing a gem to make it easier to use React and JSX in Ruby on Rails applications: &lt;a href=&quot;https://github.com/facebook/react-rails&quot;&gt;react-rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This gem has 2 primary purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To package &lt;code&gt;react.js&lt;/code&gt; in a way that&amp;#39;s easy to use and easy to update.&lt;/li&gt;
&lt;li&gt;To allow you to write JSX without an external build step to transform that into JS.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Packaging react.js&lt;/h2&gt;

&lt;p&gt;To make &lt;code&gt;react.js&lt;/code&gt; available for use client-side, simply add &lt;code&gt;react&lt;/code&gt; to your manifest, and declare the variant you&amp;#39;d like to use in your environment. When you use &lt;code&gt;:production&lt;/code&gt;, the minified and optimized &lt;code&gt;react.min.js&lt;/code&gt; will be used instead of the development version. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/environments/development.rb&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# use :production in production.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascript/application.js&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//= require react&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Writing JSX&lt;/h2&gt;

&lt;p&gt;When you name your file with &lt;code&gt;myfile.js.jsx&lt;/code&gt;, &lt;code&gt;react-rails&lt;/code&gt; will automatically try to transform that file. For the time being, we still require that you include the docblock at the beginning of the file. For example, this file will get transformed on request.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/** @jsx React.DOM */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Asset Pipeline&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;react-rails&lt;/code&gt; takes advantage of the &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;asset pipeline&lt;/a&gt; that was introduced in Rails 3.1. A very important part of that pipeline is the &lt;code&gt;assets:precompile&lt;/code&gt; Rake task. &lt;code&gt;react-rails&lt;/code&gt; will ensure that your JSX files will be transformed into regular JS before all of your assets are minified and packaged.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Installation follows the same process you&amp;#39;re familiar with. You can install it globally with &lt;code&gt;gem install react-rails&lt;/code&gt;, though we suggest you add the dependency to your &lt;code&gt;Gemfile&lt;/code&gt; directly.&lt;/p&gt;
</description>
				<pubDate>2013-07-30T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/30/use-react-and-jsx-in-ruby-on-rails.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/30/use-react-and-jsx-in-ruby-on-rails.html</guid>
			</item>
		
			<item>
				<title>React v0.4.1</title>
				<description>&lt;p&gt;React v0.4.1 is a small update, mostly containing correctness fixes. Some code has been restructured internally but those changes do not impact any of our public APIs.&lt;/p&gt;

&lt;h2&gt;React&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setState&lt;/code&gt; callbacks are now executed in the scope of your component.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt; events now work on Mobile Safari.&lt;/li&gt;
&lt;li&gt;Prevent a potential error in event handling if &lt;code&gt;Object.prototype&lt;/code&gt; is extended.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t set DOM attributes to the string &lt;code&gt;&amp;quot;undefined&amp;quot;&lt;/code&gt; on update when previously defined.&lt;/li&gt;
&lt;li&gt;Improved support for &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; attributes.&lt;/li&gt;
&lt;li&gt;Added checksums to detect and correct cases where server-side rendering markup mismatches what React expects client-side.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;JSXTransformer&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Improved environment detection so it can be run in a non-browser environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/react/downloads.html&quot;&gt;Download it now!&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>2013-07-26T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/26/react-v0-4-1.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/26/react-v0-4-1.html</guid>
			</item>
		
			<item>
				<title>Community Round-up #5</title>
				<description>&lt;p&gt;We launched the &lt;a href=&quot;https://www.facebook.com/react&quot;&gt;React Facebook Page&lt;/a&gt; along with the React v0.4 launch. 700 people already liked it to get updated on the project :)&lt;/p&gt;

&lt;h2&gt;Cross-browser onChange&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://benalpert.com/&quot;&gt;Ben Alpert&lt;/a&gt; from &lt;a href=&quot;https://www.khanacademy.org/&quot;&gt;Khan Academy&lt;/a&gt; worked on a cross-browser implementation of &lt;code&gt;onChange&lt;/code&gt; event that landed in v0.4. He wrote a blog post explaining the various browser quirks he had to deal with.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First off, what is the input event? If you have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element and want to receive events whenever the value changes, the most obvious thing to do is to listen to the change event. Unfortunately, change fires only after the text field is defocused, rather than on each keystroke. The next obvious choice is the keyup event, which is triggered whenever a key is released. Unfortunately, keyup doesn&amp;#39;t catch input that doesn&amp;#39;t involve the keyboard (e.g., pasting from the clipboard using the mouse) and only fires once if a key is held down, rather than once per inserted character.&lt;/p&gt;

&lt;p&gt;Both keydown and keypress do fire repeatedly when a key is held down, but both fire immediately before the value changes, so to read the new value you have to defer the handler to the next event loop using &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt; or similar, which slows down your app. Of course, like keyup, neither keydown nor keypress fires for non-keyboard input events, and all three can fire in cases where the value doesn&amp;#39;t change at all (such as when pressing the arrow keys).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benalpert.com/2013/06/18/a-near-perfect-oninput-shim-for-ie-8-and-9.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React Samples&lt;/h2&gt;

&lt;p&gt;Learning a new library is always easier when you have working examples you can play with. &lt;a href=&quot;https://github.com/jhw&quot;&gt;jwh&lt;/a&gt; put many of them on his &lt;a href=&quot;https://github.com/jhw/react-samples&quot;&gt;react-samples Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some simple examples with Facebook&amp;#39;s React framework&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap action bar, modal and table &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/actionbar.html&quot;&gt;#1&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/bootstrap_actionbar.html&quot;&gt;#2&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/bootstrap_modal.html&quot;&gt;#3&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/bootstrap_striped_table.html&quot;&gt;#4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Comments &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/comments1.html&quot;&gt;#1&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/comments2.html&quot;&gt;#2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Table &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/datatable.html&quot;&gt;#1&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/datatable2.html&quot;&gt;#2&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/datatable3.html&quot;&gt;#3&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/datatable4.html&quot;&gt;#4&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/datatable5.html&quot;&gt;#5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Filter Bar &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/filterbar.html&quot;&gt;#1&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/filterbar2.html&quot;&gt;#2&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/filterbar3.html&quot;&gt;#3&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/filterbar4.html&quot;&gt;#4&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/filterbar5.html&quot;&gt;#5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fundoo Rating &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/fundoo.html&quot;&gt;#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Line Char: &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/linechart.html&quot;&gt;#1&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/linechart2.html&quot;&gt;#2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multi tabs &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/multitabs.html&quot;&gt;#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/select.html&quot;&gt;#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simple Tabs &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/simpletabs.html&quot;&gt;#1&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/simpletabs2.html&quot;&gt;#2&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/simpletabs3.html&quot;&gt;#3&lt;/a&gt;,
&lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/simpletabs4.html&quot;&gt;#4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Toggle &lt;a href=&quot;https://rawgithub.com/jhw/react-samples/master/html/toggle.html&quot;&gt;#1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React Chosen Wrapper&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chenglou&quot;&gt;Cheng Lou&lt;/a&gt; wrote a wrapper for the &lt;a href=&quot;http://harvesthq.github.io/chosen/&quot;&gt;Chosen&lt;/a&gt; input library called &lt;a href=&quot;https://github.com/chenglou/react-chosen&quot;&gt;react-chosen&lt;/a&gt;. It took just 25 lines to be able to use jQuery component as a React one.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Chosen&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noResultsText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;No result&amp;quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Harvest&amp;quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Facebook&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Facebook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/option&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Harvest&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Harvest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/option&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/Chosen&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;JSX and ES6 Template Strings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://domenicdenicola.com/&quot;&gt;Domenic Denicola&lt;/a&gt; wrote a slide deck about the great applications of ES6 features and one slide shows how we could use Template Strings to compile JSX at run-time without the need for a pre-processing phase.&lt;/p&gt;

&lt;figure&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/24187146?rel=0&amp;startSlide=36&quot; width=&quot;600&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;&lt;/figure&gt;

&lt;h2&gt;React Presentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tomocchino.com/&quot;&gt;Tom Occhino&lt;/a&gt; and &lt;a href=&quot;https://github.com/jordwalke&quot;&gt;Jordan Walke&lt;/a&gt;, React developers, did a presentation of React at Facebook Seattle&amp;#39;s office. Check out the first 25 minutes for the presentation and the remaining 45 for a Q&amp;amp;A. I highly recommend you watching this video.&lt;/p&gt;

&lt;figure&gt;&lt;iframe width=&quot;650&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/XxVg_s8xAms&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/figure&gt;

&lt;h2&gt;Docs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.petehunt.net/&quot;&gt;Pete Hunt&lt;/a&gt; rewrote the entirety of the docs for v0.4. The goal was to add more explanation about why we built React and what the best practices are.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Guides&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/why-react.html&quot;&gt;Why React?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/displaying-data.html&quot;&gt;Displaying Data&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/jsx-in-depth.html&quot;&gt;JSX in Depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/jsx-gotchas.html&quot;&gt;JSX Gotchas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/interactivity-and-dynamic-uis.html&quot;&gt;Interactivity and Dynamic UIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/multiple-components.html&quot;&gt;Multiple Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/reusable-components.html&quot;&gt;Reusable Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/forms.html&quot;&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/working-with-the-browser.html&quot;&gt;Working With the Browser&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/more-about-refs.html&quot;&gt;More About Refs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/tooling-integration.html&quot;&gt;Tooling integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/react/docs/reference.html&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2013-07-23T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/23/community-roundup-5.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/23/community-roundup-5.html</guid>
			</item>
		
			<item>
				<title>React v0.4.0</title>
				<description>&lt;p&gt;Over the past 2 months we&amp;#39;ve been taking feedback and working hard to make React even better. We fixed some bugs, made some under-the-hood improvements, and added several features that we think will improve the experience developing with React. Today we&amp;#39;re proud to announce the availability of React v0.4!&lt;/p&gt;

&lt;p&gt;This release could not have happened without the support of our growing community. Since launch day, the community has contributed blog posts, questions to the &lt;a href=&quot;http://groups.google.com/group/reactjs&quot;&gt;Google Group&lt;/a&gt;, and issues and pull requests on GitHub. We&amp;#39;ve had contributions ranging from documentation improvements to major changes to React&amp;#39;s rendering. We&amp;#39;ve seen people integrate React into the tools they&amp;#39;re using and the products they&amp;#39;re building, and we&amp;#39;re all very excited to see what our budding community builds next!&lt;/p&gt;

&lt;p&gt;React v0.4 has some big changes. We&amp;#39;ve also restructured the documentation to better communicate how to use React. We&amp;#39;ve summarized the changes below and linked to documentation where we think it will be especially useful.&lt;/p&gt;

&lt;p&gt;When you&amp;#39;re ready, &lt;a href=&quot;/react/downloads.html&quot;&gt;go download it&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;React&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Switch from using &lt;code&gt;id&lt;/code&gt; attribute to &lt;code&gt;data-reactid&lt;/code&gt; to track DOM nodes. This allows you to integrate with other JS and CSS libraries more easily.&lt;/li&gt;
&lt;li&gt;Support for more DOM elements and attributes (e.g., &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Improved server-side rendering APIs. &lt;code&gt;React.renderComponentToString(&amp;lt;component&amp;gt;, callback)&lt;/code&gt; allows you to use React on the server and generate markup which can be sent down to the browser.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prop&lt;/code&gt; improvements: validation and default values. &lt;a href=&quot;http://facebook.github.io/react/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html&quot;&gt;Read our blog post for details...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Support for the &lt;code&gt;key&lt;/code&gt; prop, which allows for finer control over reconciliation. &lt;a href=&quot;http://facebook.github.io/react/docs/multiple-components.html&quot;&gt;Read the docs for details...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Removed &lt;code&gt;React.autoBind&lt;/code&gt;. &lt;a href=&quot;http://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html&quot;&gt;Read our blog post for details...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improvements to forms. We&amp;#39;ve written wrappers around &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; in order to standardize many inconsistencies in browser implementations. This includes support for &lt;code&gt;defaultValue&lt;/code&gt;, and improved implementation of the &lt;code&gt;onChange&lt;/code&gt; event, and circuit completion. &lt;a href=&quot;http://facebook.github.io/react/docs/forms.html&quot;&gt;Read the docs for details...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We&amp;#39;ve implemented an improved synthetic event system that conforms to the W3C spec.&lt;/li&gt;
&lt;li&gt;Updates to your component are batched now, which may result in a significantly faster re-render of components. &lt;code&gt;this.setState&lt;/code&gt; now takes an optional callback as it&amp;#39;s second parameter. If you were using &lt;code&gt;onClick={this.setState.bind(this, state)}&lt;/code&gt; previously, you&amp;#39;ll want to make sure you add a third parameter so that the event is not treated as the callback.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;JSX&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support for comment nodes &lt;code&gt;&amp;lt;div&amp;gt;{/* this is a comment and won&amp;#39;t be rendered */}&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Children are now transformed directly into arguments instead of being wrapped in an array
E.g. &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;Component1/&amp;gt;&amp;lt;Component2/&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; is transformed into &lt;code&gt;React.DOM.div(null, Component1(null), Component2(null))&lt;/code&gt;.
Previously this would be transformed into &lt;code&gt;React.DOM.div(null, [Component1(null), Component2(null)])&lt;/code&gt;.
If you were using React without JSX previously, your code should still work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;react-tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed a number of bugs when transforming directories&lt;/li&gt;
&lt;li&gt;No longer re-write &lt;code&gt;require()&lt;/code&gt;s to be relative unless specified&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>2013-07-17T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/17/react-v0-4-0.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/17/react-v0-4-0.html</guid>
			</item>
		
			<item>
				<title>New in React v0.4: Prop Validation and Default Values</title>
				<description>&lt;p&gt;Many of the questions we got following the public launch of React revolved around &lt;code&gt;props&lt;/code&gt;, specifically that people wanted to do validation and to make sure their components had sensible defaults.&lt;/p&gt;

&lt;h2&gt;Validation&lt;/h2&gt;

&lt;p&gt;Oftentimes you want to validate your &lt;code&gt;props&lt;/code&gt; before you use them. Perhaps you want to ensure they are a specific type. Or maybe you want to restrict your prop to specific values. Or maybe you want to make a specific prop required. This was always possible — you could have written validations in your &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;componentWillReceiveProps&lt;/code&gt; functions, but that gets clunky fast.&lt;/p&gt;

&lt;p&gt;React v0.4 will provide a nice easy way for you to use built-in validators, or to even write your own.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// An optional string prop named &amp;quot;description&amp;quot;.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// A required enum prop named &amp;quot;category&amp;quot;.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;News&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Photos&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// A prop named &amp;quot;dialog&amp;quot; that requires an instance of Dialog.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Default Values&lt;/h2&gt;

&lt;p&gt;One common pattern we&amp;#39;ve seen with our React code is to do something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;default value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do this for a few &lt;code&gt;props&lt;/code&gt; across a few components and now you have a lot of redundant code. Starting with React v0.4, you can provide default values in a declarative way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getDefaultProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;default value&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will use the cached result of this function before each &lt;code&gt;render&lt;/code&gt;. We also perform all validations before each &lt;code&gt;render&lt;/code&gt; to ensure that you have all of the data you need in the right form before you try to use it.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Both of these features are entirely optional. We&amp;#39;ve found them to be increasingly valuable at Facebook as our applications grow and evolve, and we hope others find them useful as well.&lt;/p&gt;
</description>
				<pubDate>2013-07-11T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/11/react-v0-4-prop-validation-and-default-values.html</guid>
			</item>
		
			<item>
				<title>Community Round-up #4</title>
				<description>&lt;p&gt;React reconciliation process appears to be very well suited to implement a text editor with a live preview as people at Khan Academy show us.&lt;/p&gt;

&lt;h2&gt;Khan Academy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://bjk5.com/&quot;&gt;Ben Kamens&lt;/a&gt; explains how &lt;a href=&quot;http://benalpert.com/&quot;&gt;Ben Alpert&lt;/a&gt; and &lt;a href=&quot;http://joelburget.com/&quot;&gt;Joel Burget&lt;/a&gt; are promoting React inside of &lt;a href=&quot;https://www.khanacademy.org/&quot;&gt;Khan Academy&lt;/a&gt;. They now have three projects in the works using React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Recently two Khan Academy devs dropped into our team chat and said they were gonna use React to write a new feature. They even hinted that we may want to adopt it product-wide.&lt;/p&gt;

&lt;p&gt;&amp;quot;The library is only a week old. It&amp;#39;s a brand new way of thinking about things. We&amp;#39;re the first to use it outside of Facebook. Heck, even the React devs were surprised to hear we&amp;#39;re using this in production!!!&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bjk5.com/post/53742233351/getting-your-team-to-adopt-new-technology&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best part is the demo of how React reconciliation process makes live editing more user-friendly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our renderer, post-React, is on the left. A typical math editor&amp;#39;s preview is on the right.
&lt;figure&gt;&lt;a href=&quot;http://bjk5.com/post/53742233351/getting-your-team-to-adopt-new-technology&quot;&gt;&lt;img src=&quot;/react/img/blog/monkeys.gif&quot; width=&quot;70%&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React Snippets&lt;/h2&gt;

&lt;p&gt;Over the past several weeks, members of our team, &lt;a href=&quot;http://www.petehunt.net/&quot;&gt;Pete Hunt&lt;/a&gt; and &lt;a href=&quot;http://zpao.com/&quot;&gt;Paul O&amp;#39;Shannessy&lt;/a&gt;, answered many questions that were asked in the &lt;a href=&quot;https://groups.google.com/forum/#!forum/reactjs&quot;&gt;React group&lt;/a&gt;. They give a good overview of how to integrate React with other libraries and APIs through the use of &lt;a href=&quot;/react/docs/reusable-components.html&quot;&gt;Mixins&lt;/a&gt; and &lt;a href=&quot;/react/docs/working-with-the-browser.html&quot;&gt;Lifecycle Methods&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/reactjs/l6PnP8qbofk&quot;&gt;Listening Scroll Event&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsfiddle.net/aabeL/1/&quot;&gt;JSFiddle&lt;/a&gt;: Basically I&amp;#39;ve given you two mixins. The first lets you react to global scroll events. The second is, IMO, much more useful: it gives you scroll start and scroll end events, which you can use with setState() to create components that react based on whether the user is scrolling or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/reactjs/RVAY_eQmdpo&quot;&gt;Fade-in Transition&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsfiddle.net/ufe8k/1/&quot;&gt;JSFiddle&lt;/a&gt;: Creating a new &lt;code&gt;&amp;lt;FadeInWhenAdded&amp;gt;&lt;/code&gt; component and using jQuery &lt;code&gt;.fadeIn()&lt;/code&gt; function on the DOM node.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsfiddle.net/R8f5L/5/&quot;&gt;JSFiddle&lt;/a&gt;: Using CSS transition instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/reactjs/pyUZBRWcHB4&quot;&gt;Socket.IO Integration&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/zpao/5686416&quot;&gt;Gist&lt;/a&gt;: The big thing to notice is that my component is pretty dumb (it doesn&amp;#39;t have to be but that&amp;#39;s how I chose to model it). All it does is render itself based on the props that are passed in. renderOrUpdate is where the &amp;quot;magic&amp;quot; happens.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/petehunt/5687230&quot;&gt;Gist&lt;/a&gt;: This example is doing everything -- including the IO -- inside of a single React component.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/petehunt/5687276&quot;&gt;Gist&lt;/a&gt;: One pattern that we use at Instagram a lot is to employ separation of concerns and consolidate I/O and state into components higher in the hierarchy to keep the rest of the components mostly stateless and purely display.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/reactjs/mHfBGI3Qwz4&quot;&gt;Sortable jQuery Plugin Integration&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jsfiddle.net/LQxy7/&quot;&gt;JSFiddle&lt;/a&gt;: Your React component simply render empty divs, and then in componentDidMount() you call React.renderComponent() on each of those divs to set up a new root React tree. Be sure to explicitly unmountAndReleaseReactRootNode() for each component in componentWillUnmount().&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Introduction to React Screencast&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.petehunt.net/&quot;&gt;Pete Hunt&lt;/a&gt; recorded himself implementing a simple &lt;code&gt;&amp;lt;Blink&amp;gt;&lt;/code&gt; tag in React.&lt;/p&gt;

&lt;figure&gt;&lt;iframe src=&quot;http://player.vimeo.com/video/67248575&quot; width=&quot;500&quot; height=&quot;340&quot; frameborder=&quot;0&quot; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;&lt;/figure&gt;

&lt;h2&gt;Snake in React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tomocchino.com/&quot;&gt;Tom Occhino&lt;/a&gt; implemented Snake in 150 lines with React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tomocchino/react-snake/blob/master/src/snake.js&quot;&gt;Check the source on Github&lt;/a&gt;
&lt;figure&gt;&lt;a href=&quot;http://tomocchino.github.io/react-snake/&quot;&gt;&lt;img src=&quot;/react/img/blog/snake.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2013-07-03T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/03/community-roundup-4.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/03/community-roundup-4.html</guid>
			</item>
		
			<item>
				<title>New in React v0.4: Autobind by Default</title>
				<description>&lt;p&gt;React v0.4 is very close to completion. As we finish it off, we&amp;#39;d like to share with you some of the major changes we&amp;#39;ve made since v0.3. This is the first of several posts we&amp;#39;ll be making over the next week.&lt;/p&gt;

&lt;h2&gt;What is React.autoBind?&lt;/h2&gt;

&lt;p&gt;If you take a look at most of our current examples, you&amp;#39;ll see us using &lt;code&gt;React.autoBind&lt;/code&gt; for event handlers. This is used in place of &lt;code&gt;Function.prototype.bind&lt;/code&gt;. Remember that in JS, &lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/#function.this&quot;&gt;function calls are late-bound&lt;/a&gt;. That means that if you simply pass a function around, the &lt;code&gt;this&lt;/code&gt; used inside won&amp;#39;t necessarily be the &lt;code&gt;this&lt;/code&gt; you expect. &lt;code&gt;Function.prototype.bind&lt;/code&gt; creates a new, properly bound, function so that when called, &lt;code&gt;this&lt;/code&gt; is exactly what you expect it to be.&lt;/p&gt;

&lt;p&gt;Before we launched React, we would write this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* do something with this */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We wrote &lt;code&gt;React.autoBind&lt;/code&gt; as a way to cache the function creation and save on memory usage. Since &lt;code&gt;render&lt;/code&gt; can get called multiple times, if you used &lt;code&gt;this.onClick.bind(this)&lt;/code&gt; you would actually create a new function on each pass. With React v0.3 you were able to write this instead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autoBind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* do something with this */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What&amp;#39;s Changing in v0.4?&lt;/h2&gt;

&lt;p&gt;After using &lt;code&gt;React.autoBind&lt;/code&gt; for a few weeks, we realized that there were very few times that we didn&amp;#39;t want that behavior. So we made it the default! Now all methods defined within &lt;code&gt;React.createClass&lt;/code&gt; will already be bound to the correct instance.&lt;/p&gt;

&lt;p&gt;Starting with v0.4 you can just write this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* do something with this */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For v0.4 we will simply be making &lt;code&gt;React.autoBind&lt;/code&gt; a no-op — it will just return the function you pass to it. Most likely you won&amp;#39;t have to change your code to account for this change, though we encourage you to update. We&amp;#39;ll publish a migration guide documenting this and other changes that come along with React v0.4.&lt;/p&gt;
</description>
				<pubDate>2013-07-02T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/07/02/react-v0-4-autobind-by-default.html</guid>
			</item>
		
			<item>
				<title>Community Round-up #3</title>
				<description>&lt;p&gt;The highlight of this week is that an interaction-heavy app has been ported to React. React components are solving issues they had with nested views.&lt;/p&gt;

&lt;h2&gt;Moving From Backbone To React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/clayallsopp&quot;&gt;Clay Allsopp&lt;/a&gt; successfully ported &lt;a href=&quot;http://usepropeller.com/blog/posts/from-backbone-to-react/&quot;&gt;Propeller&lt;/a&gt;, a fairly big, interaction-heavy JavaScript app, to React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://usepropeller.com/blog/posts/from-backbone-to-react/&quot;&gt;&lt;img style=&quot;float: right; margin: 0 0 10px 10px;&quot; src=&quot;/react/img/blog/propeller-logo.png&quot; /&gt;&lt;/a&gt;Subviews involve a lot of easy-to-forget boilerplate that Backbone (by design) doesn&amp;#39;t automate. Libraries like Backbone.Marionette offer more abstractions to make view nesting easier, but they&amp;#39;re all limited by the fact that Backbone delegates how and went view-document attachment occurs to the application code.&lt;/p&gt;

&lt;p&gt;React, on the other hand, manages the DOM and only exposes real nodes at select points in its API. The &amp;quot;elements&amp;quot; you code in React are actually objects which wrap DOM nodes, not the actual objects which get inserted into the DOM. Internally, React converts those abstractions into actual DOMElements and fills out the document accordingly. [...]&lt;/p&gt;

&lt;p&gt;We moved about 20 different Backbone view classes to React over the past few weeks, including the live-preview pane that you see in our little iOS demo. Most importantly, it&amp;#39;s allowed us to put energy into making each component work great on its own, instead of spending extra cycles to ensure they function in unison. For that reason, we think React is a more scalable way to build view-intensive apps than Backbone alone, and it doesn&amp;#39;t require you to drop-everything-and-refactor like a move to Ember or Angular would demand.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://usepropeller.com/blog/posts/from-backbone-to-react/&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Grunt Task for JSX&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ericclemmons.github.io/&quot;&gt;Eric Clemmons&lt;/a&gt; wrote a task for &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; that applies the JSX transformation to your Javascript files. It also works with &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; if you want all your files to be concatenated and minified together.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grunt task for compiling Facebook React&amp;#39;s .jsx templates into .js&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/output/dir&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/jsx/templates/dir&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It also works great with &lt;code&gt;grunt-browserify&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-react&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/source/main.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/target/output.js&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ericclemmons/grunt-react&quot;&gt;Check out the project ...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Backbone/Handlebars Nested Views&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://joelburget.com/&quot;&gt;Joel Burget&lt;/a&gt; wrote a blog post talking about the way we would write React-like components in Backbone and Handlebars.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem here is that we&amp;#39;re trying to maniplate a tree, but there&amp;#39;s a textual layer we have to go through. Our views are represented as a tree - the subviews are children of CommentCollectionView - and they end up as part of a tree in the DOM. But there&amp;#39;s a Handlebars layer in the middle (which deals in flat strings), so the hierarchy must be destructed and rebuilt when we render.&lt;/p&gt;

&lt;p&gt;What does it take to render a collection view? In the Backbone/Handlebars view of the world you have to render the template (with stubs), render each subview which replaces a stub, and keep a reference to each subview (or anything within the view that could change in the future).&lt;/p&gt;

&lt;p&gt;So while our view is conceptually hierarchical, due to the fact that it has to go through a flat textual representation, we need to do a lot of extra work to reassemble that structure after rendering.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joelburget.com/react/&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;JSRomandie Meetup&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/renajohn/&quot;&gt;Renault John Lecoultre&lt;/a&gt; from &lt;a href=&quot;http://www.bugbuster.com&quot;&gt;BugBuster&lt;/a&gt; did a React introduction talk at a JS meetup called &lt;a href=&quot;https://twitter.com/jsromandie&quot;&gt;JS Romandie&lt;/a&gt; last week.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;888a9d50c01b01300df36658d0894ac1&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2&gt;CoffeeScript integration&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.vjeux.com/&quot;&gt;Vjeux&lt;/a&gt; used the fact that JSX is just a syntactic sugar on-top of regular JS to rewrite the React front-page examples in CoffeeScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Multiple people asked what&amp;#39;s the story about JSX and CoffeeScript. There is no JSX pre-processor for CoffeeScript and I&amp;#39;m not aware of anyone working on it. Fortunately, CoffeeScript is pretty expressive and we can play around the syntax to come up with something that is usable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MarkdownEditor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onKeyUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleKeyUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;textarea&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.vjeux.com/2013/javascript/react-coffeescript.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Tutorial in Plain Javascript&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve seen a lot of people comparing React with various frameworks. &lt;a href=&quot;http://ricardo.cc/&quot;&gt;Ricardo Tomasi&lt;/a&gt; decided to re-implement the tutorial without any framework, just plain Javascript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Facebook &amp;amp; Instagram launched the React framework and an accompanying tutorial. Developer Vlad Yazhbin decided to rewrite that using AngularJS. The end result is pretty neat, but if you&amp;#39;re like me you will not actually appreciate the HTML speaking for itself and doing all the hard work. So let&amp;#39;s see what that looks like in plain javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ricardo.cc/2013/06/07/react-tutorial-rewritten-in-plain-javascript.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2013-06-27T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/27/community-roundup-3.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/27/community-roundup-3.html</guid>
			</item>
		
	</channel>
</rss>
