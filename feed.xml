<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>React</title>
		<description>A JavaScript library for building user interfaces</description>
		<link>http://facebook.github.io/react</link>
		<atom:link href="http://facebook.github.io/react/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Community Round-up #3</title>
				<description>&lt;p&gt;The highlight of this week is that an interaction-heavy app has been ported to React. React components are solving issues they had with nested views.&lt;/p&gt;

&lt;h2&gt;Moving From Backbone To React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/clayallsopp&quot;&gt;Clay Allsopp&lt;/a&gt; successfuly ported &lt;a href=&quot;http://usepropeller.com/blog/posts/from-backbone-to-react/&quot;&gt;Propeller&lt;/a&gt;, a fairly big, interaction-heavy JavaScript app, to React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://usepropeller.com/blog/posts/from-backbone-to-react/&quot;&gt;&lt;img style=&quot;float: right; margin: 0 0 10px 10px;&quot; src=&quot;/react/img/blog/propeller-logo.png&quot; /&gt;&lt;/a&gt;Subviews involve a lot of easy-to-forget boilerplate that Backbone (by design) doesn&amp;#39;t automate. Libraries like Backbone.Marionette offer more abstractions to make view nesting easier, but they&amp;#39;re all limited by the fact that Backbone delegates how and went view-document attachment occurs to the application code.&lt;/p&gt;

&lt;p&gt;React, on the other hand, manages the DOM and only exposes real nodes at select points in its API. The &amp;quot;elements&amp;quot; you code in React are actually objects which wrap DOM nodes, not the actual objects which get inserted into the DOM. Internally, React converts those abstractions into actual DOMElements and fills out the document accordingly. [...]&lt;/p&gt;

&lt;p&gt;We moved about 20 different Backbone view classes to React over the past few weeks, including the live-preview pane that you see in our little iOS demo. Most importantly, it&amp;#39;s allowed us to put energy into making each component work great on its own, instead of spending extra cycles to ensure they function in unison. For that reason, we think React is a more scalable way to build view-intensive apps than Backbone alone, and it doesn&amp;#39;t require you to drop-everything-and-refactor like a move to Ember or Angular would demand.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://usepropeller.com/blog/posts/from-backbone-to-react/&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Grunt Task for JSX&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ericclemmons.github.io/&quot;&gt;Eric Clemmons&lt;/a&gt; wrote a task for &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; that applies the JSX transformation to your Javascript files. It also works with &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; if you want all your files to be concatenated and minified together.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grunt task for compiling Facebook React&amp;#39;s .jsx templates into .js&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/output/dir&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/jsx/templates/dir&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It also works great with &lt;code&gt;grunt-browserify&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-react&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/source/main.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;path/to/target/output.js&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ericclemmons/grunt-react&quot;&gt;Check out the project ...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Backbone/Handlebars Nested Views&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://joelburget.com/&quot;&gt;Joel Burget&lt;/a&gt; wrote a blog post talking about the way we would write React-like components in Backbone and Handlebars.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem here is that we&amp;#39;re trying to maniplate a tree, but there&amp;#39;s a textual layer we have to go through. Our views are represented as a tree - the subviews are children of CommentCollectionView - and they end up as part of a tree in the DOM. But there&amp;#39;s a Handlebars layer in the middle (which deals in flat strings), so the hierarchy must be destructed and rebuilt when we render.&lt;/p&gt;

&lt;p&gt;What does it take to render a collection view? In the Backbone/Handlebars view of the world you have to render the template (with stubs), render each subview which replaces a stub, and keep a reference to each subview (or anything within the view that could change in the future).&lt;/p&gt;

&lt;p&gt;So while our view is conceptually hierarchical, due to the fact that it has to go through a flat textual representation, we need to do a lot of extra work to reassemble that structure after rendering.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joelburget.com/react/&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;JSRomandie Meetup&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/renajohn/&quot;&gt;Renault John Lecoultre&lt;/a&gt; did a React introduction talk at a JS meetup called &lt;a href=&quot;https://twitter.com/jsromandie&quot;&gt;JS Romandie&lt;/a&gt; last week.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;888a9d50c01b01300df36658d0894ac1&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2&gt;CoffeeScript integration&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.vjeux.com/&quot;&gt;Vjeux&lt;/a&gt; used the fact that JSX is just a syntactic sugar on-top of regular JS to rewrite the React front-page examples in CoffeeScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Multiple people asked what&amp;#39;s the story about JSX and CoffeeScript. There is no JSX pre-processor for CoffeeScript and I&amp;#39;m not aware of anyone working on it. Fortunately, CoffeeScript is pretty expressive and we can play around the syntax to come up with something that is usable.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MarkdownEditor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onKeyUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleKeyUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;textarea&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.vjeux.com/2013/javascript/react-coffeescript.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Tutorial in Plain Javascript&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ve seen a lot of people comparing React with various frameworks. &lt;a href=&quot;http://ricardo.cc/&quot;&gt;Ricardo Tomasi&lt;/a&gt; decided to re-implement the tutorial without any framework, just plain Javascript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Facebook &amp;amp; Instagram launched the React framework and an accompanying tutorial. Developer Vlad Yazhbin decided to rewrite that using AngularJS. The end result is pretty neat, but if you&amp;#39;re like me you will not actually appreciate the HTML speaking for itself and doing all the hard work. So let&amp;#39;s see what that looks like in plain javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ricardo.cc/2013/06/07/react-tutorial-rewritten-in-plain-javascript.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2013-06-27T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/27/community-roundup-3.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/27/community-roundup-3.html</guid>
			</item>
		
			<item>
				<title>React v0.3.3</title>
				<description>&lt;p&gt;We have a ton of great stuff coming in v0.4, but in the meantime we&amp;#39;re releasing v0.3.3. This release addresses some small issues people were having and simplifies our tools to make them easier to use.&lt;/p&gt;

&lt;h2&gt;react-tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Upgrade Commoner so &lt;code&gt;require&lt;/code&gt; statements are no longer relativized when passing through the transformer. This was a feature needed when building React, but doesn&amp;#39;t translate well for other consumers of &lt;code&gt;bin/jsx&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Upgraded our dependencies on Commoner and Recast so they use a different directory for their cache.&lt;/li&gt;
&lt;li&gt;Freeze our esprima dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;React&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Allow reusing the same DOM node to render different components. e.g. &lt;code&gt;React.renderComponent(&amp;lt;div/&amp;gt;, domNode); React.renderComponent(&amp;lt;span/&amp;gt;, domNode);&lt;/code&gt; will work now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;JSXTransformer&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Improved the in-browser transformer so that transformed scripts will execute in the expected scope. The allows components to be defined and used from separate files.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>2013-06-21T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/21/react-v0-3-3.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/21/react-v0-3-3.html</guid>
			</item>
		
			<item>
				<title>Community Round-up #2</title>
				<description>&lt;p&gt;Since the launch we have received a lot of feedback and are actively working on React 0.4. In the meantime, here are the highlights of this week.&lt;/p&gt;

&lt;h2&gt;Some quick thoughts on React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.andrewgreig.com/&quot;&gt;Andrew Greig&lt;/a&gt; made a blog post that gives a high level description of what React is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have been using Facebooks recently released Javascript framework called React.js for the last few days and have managed to obtain a rather high level understanding of how it works and formed a good perspective on how it fits in to the entire javascript framework ecosystem.&lt;/p&gt;

&lt;p&gt;Basically, React is not an MVC framework. It is not a replacement for Backbone or Knockout or Angular, instead it is designed to work with existing frameworks and help extend their functionality.&lt;/p&gt;

&lt;p&gt;It is designed for building big UIs. The type where you have lots of reusable components that are handling events and presenting and changing some backend data. In a traditional MVC app, React fulfils the role of the View. So you would still need to handle the Model and Controller on your own.&lt;/p&gt;

&lt;p&gt;I found the best way to utilise React was to pair it with Backbone, with React replacing the Backbone View, or to write your own Model/Data object and have React communicate with that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.andrewgreig.com/637/&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React and Socket.IO Chat Application&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://danialk.github.io/&quot;&gt;Danial Khosravi&lt;/a&gt; made a real-time chat application that interacts with the back-end using Socket.IO.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A week ago I was playing with AngularJS and &lt;a href=&quot;https://github.com/btford/angular-socket-io-im&quot;&gt;this little chat application&lt;/a&gt; which uses socket.io and nodejs for realtime communication. Yesterday I saw a post about ReactJS in &lt;a href=&quot;http://www.echojs.com/&quot;&gt;EchoJS&lt;/a&gt; and started playing with this UI library. After playing a bit with React, I decided to write and chat application using React and I used Bran Ford&amp;#39;s Backend for server side of this little app.
&lt;figure&gt;&lt;a href=&quot;http://danialk.github.io/blog/2013/06/16/reactjs-and-socket-dot-io-chat-application/&quot;&gt;&lt;img src=&quot;/react/img/blog/chatapp.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://danialk.github.io/blog/2013/06/16/reactjs-and-socket-dot-io-chat-application/&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React and Other Frameworks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.petehunt.net/blog/&quot;&gt;Pete Hunt&lt;/a&gt; wrote an answer on Quora comparing React and Angular directives. At the end, he explains how you can make an Angular directive that is in fact being rendered with React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To set the record straight: React components are far more powerful than Angular templates; they should be compared with Angular&amp;#39;s directives instead. So I took the first Google hit for &amp;quot;AngularJS directive tutorial&amp;quot; (AngularJS Directives Tutorial - Fundoo Solutions), rewrote it in React and compared them. [...]&lt;/p&gt;

&lt;p&gt;We&amp;#39;ve designed React from the beginning to work well with other libraries. Angular is no exception. Let&amp;#39;s take the original Angular example and use React to implement the fundoo-rating directive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.quora.com/Pete-Hunt/Posts/Facebooks-React-vs-AngularJS-A-Closer-Look&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the same vein, &lt;a href=&quot;https://twitter.com/markov_twain/status/345702941845499906&quot;&gt;Markov Twain&lt;/a&gt; re-implemented the examples on the front-page &lt;a href=&quot;http://jsbin.com/azihiw/2/edit&quot;&gt;with Ember&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/vla&quot;&gt;Vlad Yazhbin&lt;/a&gt; re-implemented the tutorial &lt;a href=&quot;http://jsfiddle.net/vla/Cdrse/&quot;&gt;with Angular&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Web Components: React &amp;amp; x-tags&lt;/h2&gt;

&lt;p&gt;Mozilla and Google are actively working on Web Components. &lt;a href=&quot;http://blog.vjeux.com/&quot;&gt;Vjeux&lt;/a&gt; wrote a proof of concept that shows how to implement them using React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using &lt;a href=&quot;http://www.x-tags.org/&quot;&gt;x-tags&lt;/a&gt; from Mozilla, we can write custom tags within the DOM. This is a great opportunity to be able to write reusable components without being tied to a particular library. I wrote &lt;a href=&quot;https://github.com/vjeux/react-xtags/&quot;&gt;x-react&lt;/a&gt; to have them being rendered in React.
&lt;figure&gt;&lt;a href=&quot;http://blog.vjeux.com/2013/javascript/custom-components-react-x-tags.html&quot;&gt;&lt;img src=&quot;/react/img/blog/xreact.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.vjeux.com/2013/javascript/custom-components-react-x-tags.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;React TodoMVC Example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC.com&lt;/a&gt; is a website that collects various implementations of the same basic Todo app. &lt;a href=&quot;http://www.petehunt.net/blog/&quot;&gt;Pete Hunt&lt;/a&gt; wrote an idiomatic React version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers these days are spoiled with choice when it comes to selecting an MV* framework for structuring and organizing their JavaScript web apps.&lt;/p&gt;

&lt;p&gt;To help solve this problem, we created TodoMVC - a project which offers the same Todo application implemented using MV* concepts in most of the popular JavaScript MV* frameworks of today.
&lt;figure&gt;&lt;a href=&quot;http://todomvc.com/labs/architecture-examples/react/&quot;&gt;&lt;img src=&quot;/react/img/blog/todomvc.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tastejs/todomvc/tree/gh-pages/labs/architecture-examples/react&quot;&gt;Read the source code...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;JSX is not HTML&lt;/h2&gt;

&lt;p&gt;Many of you pointed out differences between JSX and HTML. In order to clear up some confusion, we have added some documentation that covers the four main differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/docs/jsx-is-not-html.html&quot;&gt;Whitespace removal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/docs/jsx-is-not-html.html&quot;&gt;HTML Entities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/docs/jsx-is-not-html.html&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/docs/jsx-is-not-html.html&quot;&gt;Custom HTML Attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>2013-06-19T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/19/community-roundup-2.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/19/community-roundup-2.html</guid>
			</item>
		
			<item>
				<title>Community Round-up #1</title>
				<description>&lt;p&gt;React was open sourced two weeks ago and it&amp;#39;s time for a little round-up of what has been going on.&lt;/p&gt;

&lt;h2&gt;Khan Academy Question Editor&lt;/h2&gt;

&lt;p&gt;It looks like &lt;a href=&quot;http://benalpert.com/&quot;&gt;Ben Alpert&lt;/a&gt; is the first person outside of Facebook and Instagram to push React code to production. We are very grateful for his contributions in form of pull requests, bug reports and presence on IRC (&lt;a href=&quot;irc://chat.freenode.net/reactjs&quot;&gt;#reactjs on Freenode&lt;/a&gt;). Ben wrote about his experience using React:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I just rewrote a 2000-line project in React and have now made a handful of pull requests to React. Everything about React I&amp;#39;ve seen so far seems really well thought-out and I&amp;#39;m proud to be the first non-FB/IG production user of React.&lt;/p&gt;

&lt;p&gt;The project that I rewrote in React (and am continuing to improve) is the Khan Academy question editor which content creators can use to enter questions and hints that will be presented to students:
&lt;figure&gt;&lt;a href=&quot;http://benalpert.com/2013/06/09/using-react-to-speed-up-khan-academy.html&quot;&gt;&lt;img src=&quot;/react/img/blog/khan-academy-editor.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benalpert.com/2013/06/09/using-react-to-speed-up-khan-academy.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Pimp my Backbone.View (by replacing it with React)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.mayflower.de/&quot;&gt;Paul Seiffert&lt;/a&gt; wrote a blog post that explains how to integrate React into Backbone applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React has some interesting concepts for JavaScript view objects that can be used to eliminate this one big problem I have with Backbone.js.&lt;/p&gt;

&lt;p&gt;As in most MVC implementations (although React is probably just a VC implementation), a view is one portion of the screen that is managed by a controlling object. This object is responsible for deciding when to re-render the view and how to react to user input. With React, these view-controllers objects are called components. A component knows how to render its view and how to handle to the user&amp;#39;s interaction with it.&lt;/p&gt;

&lt;p&gt;The interesting thing is that React is figuring out by itself when to re-render a view and how to do this in the most efficient way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.mayflower.de/3937-Backbone-React.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Using facebook&amp;#39;s React with require.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.xenji.com/&quot;&gt;Mario Mueller&lt;/a&gt; wrote a menu component in React and was able to easily integrate it with require.js, EventEmitter2 and bower.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I recently stumbled upon facebook&amp;#39;s React library, which is a Javascript library for building reusable frontend components. Even if this lib is only at version 0.3.x it behaves very stable, it is fast and is fun to code. I&amp;#39;m a big fan of require.js, so I tried to use React within the require.js eco system. It was not as hard as expected and here are some examples and some thoughts about it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.xenji.com/2013/06/facebooks-react-require-js.html&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Origins of React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.petehunt.net/blog/&quot;&gt;Pete Hunt&lt;/a&gt; explained what differentiates React from other JavaScript libraries in &lt;a href=&quot;http://facebook.github.io/react/blog/2013/06/05/why-react.html&quot;&gt;a previous blog post&lt;/a&gt;. &lt;a href=&quot;http://leebyron.com/&quot;&gt;Lee Byron&lt;/a&gt; gives another perspective on Quora:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React isn&amp;#39;t quite like any other popular Javascript libraries, and it solves a very specific problem: complex UI rendering. It&amp;#39;s also intended to be used along side many other popular libraries. For example, React works well with Backbone.js, amongst many others.&lt;/p&gt;

&lt;p&gt;React was born out of frustrations with the common pattern of writing two-way data bindings in complex MVC apps. React is an implementation of one-way data bindings.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.quora.com/React-JS-Library/How-is-Facebooks-React-JavaScript-library/answer/Lee-Byron?srid=3DcX&quot;&gt;Read the full post...&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>2013-06-12T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/12/community-roundup.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/12/community-roundup.html</guid>
			</item>
		
			<item>
				<title>Why did we build React?</title>
				<description>&lt;p&gt;There are a lot of JavaScript MVC frameworks out there. Why did we build React
and why would you want to use it?&lt;/p&gt;

&lt;h2&gt;React isn&amp;#39;t an MVC framework.&lt;/h2&gt;

&lt;p&gt;React is a library for building composable user interfaces. It encourages
the creation of reusable UI components which present data that changes over
time.&lt;/p&gt;

&lt;h2&gt;React doesn&amp;#39;t use templates.&lt;/h2&gt;

&lt;p&gt;Traditionally, web application UIs are built using templates or HTML directives.
These templates dictate the full set of abstractions that you are allowed to use
to build your UI.&lt;/p&gt;

&lt;p&gt;React approaches building user interfaces differently by breaking them into
&lt;strong&gt;components&lt;/strong&gt;. This means React uses JavaScript to generate markup, which we
see as an advantage over templates for a few reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JavaScript is a flexible, powerful programming language&lt;/strong&gt; with the ability
to build abstractions. This is incredibly important in large applications.&lt;/li&gt;
&lt;li&gt;By unifying your markup with its corresponding view logic, React can actually
make views &lt;strong&gt;easier to extend and maintain&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;By baking an understanding of markup and content into JavaScript, there&amp;#39;s
&lt;strong&gt;no manual string concatenation&lt;/strong&gt; and therefore less surface area for XSS
vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#39;ve also created &lt;a href=&quot;http://facebook.github.io/react/docs/syntax.html&quot;&gt;JSX&lt;/a&gt;, an optional
syntax extension, in case you prefer the readability of HTML to raw JavaScript.&lt;/p&gt;

&lt;h2&gt;Reactive updates are dead simple.&lt;/h2&gt;

&lt;p&gt;React really shines when your data changes over time.&lt;/p&gt;

&lt;p&gt;In a traditional JavaScript application, you need to look at what data changed
and imperatively make changes to the DOM to keep it up-to-date. Even AngularJS,
which provides a declarative interface via directives and data binding &lt;a href=&quot;http://docs.angularjs.org/guide/directive#reasonsbehindthecompilelinkseparation&quot;&gt;requires
a linking function to manually update DOM nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;React takes a different approach.&lt;/p&gt;

&lt;p&gt;When your component is first initialized, the &lt;code&gt;render&lt;/code&gt; method is called,
generating a lightweight representation of your view. From that representation,
a string of markup is produced, and injected into the document. When your data
changes, the &lt;code&gt;render&lt;/code&gt; method is called again. In order to perform updates as
efficiently as possible, we diff the return value from the previous call to
&lt;code&gt;render&lt;/code&gt; with the new one, and generate a minimal set of changes to be applied
to the DOM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The data returned from &lt;code&gt;render&lt;/code&gt; is neither a string nor a DOM node -- it&amp;#39;s a
lightweight description of what the DOM should look like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We call this process &lt;strong&gt;reconciliation&lt;/strong&gt;. Check out
&lt;a href=&quot;http://jsfiddle.net/fv6RD/3/&quot;&gt;this jsFiddle&lt;/a&gt; to see an example of
reconciliation in action.&lt;/p&gt;

&lt;p&gt;Because this re-render is so fast (around 1ms for TodoMVC), the developer
doesn&amp;#39;t need to explicitly specify data bindings. We&amp;#39;ve found this approach
makes it easier to build apps.&lt;/p&gt;

&lt;h2&gt;HTML is just the beginning.&lt;/h2&gt;

&lt;p&gt;Because React has its own lightweight representation of the document, we can do
some pretty cool things with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook has dynamic charts that render to &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; instead of HTML.&lt;/li&gt;
&lt;li&gt;Instagram is a &amp;quot;single page&amp;quot; web app built entirely with React and
&lt;code&gt;Backbone.Router&lt;/code&gt;. Designers regularly contribute React code with JSX.&lt;/li&gt;
&lt;li&gt;We&amp;#39;ve built internal prototypes that run React apps in a web worker and use
React to drive &lt;strong&gt;native iOS views&lt;/strong&gt; via an Objective-C bridge.&lt;/li&gt;
&lt;li&gt;You can run React
&lt;a href=&quot;http://github.com/petehunt/react-server-rendering&quot;&gt;on the server&lt;/a&gt;
for SEO, performance, code sharing and overall flexibility.&lt;/li&gt;
&lt;li&gt;Events behave in a consistent, standards-compliant way in all browsers
(including IE8) and automatically use
&lt;a href=&quot;http://davidwalsh.name/event-delegate&quot;&gt;event delegation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Head on over to
&lt;a href=&quot;http://facebook.github.io/react&quot;&gt;facebook.github.io/react&lt;/a&gt; to check
out what we have built. Our documentation is geared towards building
apps with the framework, but if you are interested in the
nuts and bolts
&lt;a href=&quot;http://facebook.github.io/react/support.html&quot;&gt;get in touch&lt;/a&gt; with us!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
				<pubDate>2013-06-05T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/05/why-react.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/05/why-react.html</guid>
			</item>
		
			<item>
				<title>JSFiddle Integration</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net&quot;&gt;JSFiddle&lt;/a&gt; just announced support for React. This is an exciting news as it makes collaboration on snippets of code a lot easier. You can play around this &lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/vjeux/kb3gN/&quot;&gt;base React JSFiddle&lt;/a&gt;&lt;/strong&gt;, fork it and share it! A &lt;a href=&quot;http://jsfiddle.net/vjeux/VkebS/&quot;&gt;fiddle without JSX&lt;/a&gt; is also available.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot;&gt;&lt;p&gt;React (by Facebook) is now available on JSFiddle. &lt;a href=&quot;http://t.co/wNQf9JPv5u&quot; title=&quot;http://facebook.github.io/react/&quot;&gt;facebook.github.io/react/&lt;/a&gt;&lt;/p&gt;&amp;mdash; JSFiddle (@jsfiddle) &lt;a href=&quot;https://twitter.com/jsfiddle/status/341114115781177344&quot;&gt;June 2, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</description>
				<pubDate>2013-06-02T00:00:00-07:00</pubDate>
				<link>http://facebook.github.io/react/blog/2013/06/02/jsfiddle-integration.html</link>
				<guid isPermaLink="true">http://facebook.github.io/react/blog/2013/06/02/jsfiddle-integration.html</guid>
			</item>
		
	</channel>
</rss>
